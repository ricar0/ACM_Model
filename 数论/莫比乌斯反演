ll prime[N], mu[N], k;
ll phi[N];
bool is_prime[N];
inline void init(int n) {
    memset(is_prime, true, sizeof is_prime);
    mu[1] = 1; phi[1] = 1;
    for (int i = 2; i < n; ++i) {
        if (is_prime[i]) prime[++k] = i, mu[i] = -1, phi[i] = i-1;
        for (int j = 1; j <= k && i * prime[j] < n; ++j) {
            is_prime[i * prime[j]] = false;
            if (i % prime[j] == 0) {
                phi[i * prime[j]] = phi[i] * prime[j];
                break;
            } else {
                mu[i * prime[j]] = -mu[i];
                phi[i * prime[j]] = phi[i] * (prime[j] - 1);
            }
        }
    }
    for (int i = 1; i < n; ++i) mu[i] += mu[i-1], phi[i] += phi[i-1];
}

ll cal(int n, int m) {
    ll ans = 0;
    n /= d, m /= d;
    int mx = min(n, m);
    for (ll l = 1, r; l <= mx; l = r + 1) {
        r = min(n / (n / l), m / (m / l));
        ans += 1ll * (mu[r] - mu[l-1]) * (n / l) * (m / l);
    }
    return ans;
}