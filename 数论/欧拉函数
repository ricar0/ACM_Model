int prime[N], phi[N], k;
bool is_prime[N];
void get_phi(int n) {
    memset(is_prime, true, sizeof is_prime);
    phi[1] = 1;
    for (int i = 2; i < n; i++) {
        if (is_prime[i]) prime[++k] = i, phi[i] = i - 1;
        for (int j = 1; j <= k && i * prime[j] < n; j++) {
            is_prime[i * prime[j]] = false;
            if (i % prime[j] == 0) {
                phi[i * prime[j]] = phi[i] * prime[j];
                break;
            }
            phi[i * prime[j]] = phi[i] * (prime[j] - 1);
        }
    }
}

ll init(ll n) {
    ll m = (int)sqrt(n + 0.5);
    ll ans = n;
    for (ll i = 2; i <= m; ++ i) {
        if (n % i == 0) {
            ans = ans / i * (i - 1);
            while(n % i == 0) n /= i;
        }
    }
    if (n > 1) ans = ans / n * (n - 1);
    return ans;
}