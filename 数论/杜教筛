ll prime[N], mu[N], k;
ll phi[N];
bool is_prime[N];
inline void init(int n) {
    memset(is_prime, true, sizeof is_prime);
    mu[1] = 1; phi[1] = 1;
    for (re int i = 2; i < n; ++i) {
        if (is_prime[i]) prime[++k] = i, mu[i] = -1, phi[i] = i-1;
        for (re int j = 1; j <= k && i * prime[j] < n; ++j) {
            is_prime[i * prime[j]] = false;
            if (i % prime[j] == 0) {
                phi[i * prime[j]] = phi[i] * prime[j];
                break;
            } else {
                mu[i * prime[j]] = -mu[i];
                phi[i * prime[j]] = phi[i] * (prime[j] - 1);
            }
        }
    }
    for (re int i = 1; i < n; ++i) mu[i] += mu[i-1], phi[i] += phi[i-1];
}
unordered_map<ll, ll> sum_mu, sum_phi;
inline ll GetSum_mu(ll n) {
    if (n <= 3e7) return mu[n];
    if (sum_mu[n]) return sum_mu[n];
    ll ans = 1;
    for (re ll l = 2, r; l <= n; l = r + 1) {
        r = min(n, n / (n / l));
        ans -= (r - l + 1) * GetSum_mu(n / l);
    }
    return sum_mu[n] = ans;
}

inline ll GetSum_phi(ll n) {
    if (n <= 3e7) return phi[n];
    if (sum_phi[n]) return sum_phi[n];
    ll ans = n * (n + 1) / 2;
    for (re ll l = 2, r; l <= n; l = r + 1) {
        r = min(n, n / (n / l));
        ans -= (r - l + 1) * GetSum_phi(n / l);
    }
    return sum_phi[n] = ans;
}