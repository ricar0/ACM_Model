vector<int> TreeToPrufer(int n) {// 1~n-2个数
    vector<int> pru(n+1);
    vector<int> in(n+1);
    vector<int> fa(n+1);
    for (int i = 1; i < n; i++) read(fa[i]), ++in[fa[i]];
    for (int i = 1, j = 1; i <= n - 2; i++, j++) {
        while (in[j]) ++j; pru[i] = fa[j];
        while (i <= n - 2 && !--in[pru[i]] && pru[i] < j) pru[i+1] = fa[pru[i]], ++i;
    }
    return pru;
}

vector<int> PruferToTree(int n) {// 1~n-1个数
    vector<int> fa(n+1);
    vector<int> in(n+1);
    vector<int> pru(n+1);
    for (int i = 1; i <= n - 2; i++) read(pru[i]), ++in[pru[i]]; pru[n-1] = n;
    for (int i = 1, j = 1; i < n; i++, j++) {
        while (in[j]) ++j; fa[j] = pru[i];
        while (i < n && !--in[pru[i]] && pru[i] < j) fa[pru[i]] = pru[i+1], ++i;
    }
    return fa;
}

// 性质
// prufer序列中某个编号出现的次数就等于这个编号的节点在无根树中的度数-1

// 一棵n个节点的无根树唯一地对应了一个长度为n-2的数列，数列中的每个数都在1到n的范围内。

// n个点的无向完全图的生成树的计数：n(n−2)，即n个点的有标号无根树的计数

// n个节点的度依次为d1,d2,…,dn的无根树共有(n−2)!/∏(di−1)!个，因为此时Prufer编码中的数字i恰好出现di−1次，(n−2)!是总排列数

// n个点的 有标号有根树的计数：n(n−2)∗n=n(n−1)
