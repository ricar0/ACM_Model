1.朴素算法

时间复杂度O(n^3)

for (int i = 1; i <= n; i++) 
    for (int j = m; j >= v[i]; j--)
        for (int k = 1; k <= s[i]; k++)
            f[j] = max(f[j], f[j - k*v[i]] + k*w[i]);

核心 f[j] = max(f[j], f[j-v] + w, f[j-v*2] + 2*w, f[j-3*v] + 3*w ....)

2.二进制优化

时间复杂度O(nm*log(n))

例如: 10 = 1 + 2 + 4 + 3

将问题转换为01背包问题

3.单调队列优化

时间复杂度O(nm)

f[0] = max(f[0], f[v] + w, f[2*v] + 2*w, f[3*v] + 3*w...)
f[1] = max(f[1], f[1+v] + w, f[1+2*v] + 2*w, f[1+3*v] + 3*w...)
f[2] = max(f[2], f[2+v] + w, f[2+2*v] + 2*w, f[2+3*v] + 3*w...)
...
f[v-1] = max(f[v-1], f[v-1+v] + w, f[v-1+2*v] + 2*w, f[v-1+3*v] + 3*w...)

所有的 m 都可以转换为 c + a * x, 而且是互不影响的

f[j] = f[j]
f[j+v] = max f[j+v], f[j] + w
f[j+2*v] = max f[j+2*v], f[j+v] + w, f[j] + 2*w

修改一下变成
f[j] = f[j]
f[j+v] = max(f[j+v] - w, f[j]) + w
f[j+2*v] = max(f[j+2*v] - 2*w, f[j+v] - w, f[j]) + 2*w

将 f[j + k*w] - k*w 存入单调队列中, 取值时用加上 k*w

#include <bits/stdc++.h>
using namespace std;

const int N = 20010;

int f[N], g[N], n, m;
int q[N];

int main() {
    cin >> n >> m;
    for (int i = 1; i <= n; i++) {
        int v, w, s;
        cin >> v >> w >> s;
        memcpy(g, f, sizeof f);
        for (int j = 0; j < v; j++) {
            int hh = 1, tt = 0;
            for (int k = j; k <= m; k += v) {
                while (hh <= tt && k - q[hh] > s*v) hh++; //队列中最多只能有s+1个值
                if (hh <= tt) f[k] = max(f[k], g[q[hh]] + ( k - q[hh]) / v * w);
                while (hh <= tt && g[q[tt]] - (q[tt] - j) / v * w <= g[k] - (k - j) / v * w) tt--;
                q[++tt] = k;
            }
        }
    }
    cout << f[m] << endl;
} 
