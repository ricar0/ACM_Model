vector<int> g[N];
int prime[N], siz[N], mx[N], cnt, rt, n;
bool is_prime[N];
ull Hash[N];
void get_prime(int n) {
    memset(is_prime, true, sizeof is_prime);
    for (int i = 2; i <= n; i++) {
        if (is_prime[i]) prime[++cnt] = i;
        for (int j = 1; j <= cnt && prime[j] * i <= n; j++) {
            is_prime[prime[j] * i] = false;
            if (i % prime[j] == 0) break;
        }
    }
}
void getRt(int x, int fa) {
    siz[x] = 1, mx[x] = 0;
    for (auto v : g[x]) {
        if (v == fa) continue;
        getRt(v, x);
        siz[x] += siz[v];
        mx[x] = max(mx[x], siz[v]);
    }
    mx[x] = max(mx[x], n - siz[x]);
    if (mx[x] < mx[rt]) rt = x;
}
ull getTreeHash(int x, int fa) {
    siz[x] = 1;
    ull res = 1;
    for (auto v : g[x]) {
        if (v == fa) continue;
        res += getTreeHash(v, x) * prime[siz[v]];
        siz[x] += siz[v];
    }
    return res;
}